services:
  service-frontend:
    container_name: service-frontend
    env_file: ../service-frontend/.env
    build:
      context: ../
      dockerfile: ./service-frontend/Dockerfile
      target: dev
    tty: true
    depends_on:
      - database
      - cache
    ports:
      - 55021:3000 # for build
      - 55022:5173 # for dev
    networks:
      - external
      - internal
    volumes:
      - type: volume
        source: service-frontend
        target: /home/node
      - type: bind
        source: ../service-frontend
        target: /home/node
      - type: bind
        source: ../lib-frontend
        target: /home/node/lib
  database:
    container_name: database
    env_file: ../database/.env
    build:
      context: ../
      dockerfile: ./database/Dockerfile
    ports:
      - 55024:3306
    networks:
      - external
      - internal
    volumes:
      - type: volume
        source: database
        target: /var/lib/mysql
      - type: bind # Persistent DB data
        source: ../database/.data
        target: /var/lib/mysql
  cache:
    container_name: cache
    image: amazon/dynamodb-local:latest
    command: ['-jar', 'DynamoDBLocal.jar', '-sharedDb', '-dbPath', './data']
    ports:
      - 55025:8000
    networks:
      - external
      - internal
    working_dir: /home/dynamodblocal
    volumes:
      - type: bind
        source: ../cache/.data
        target: /home/dynamodblocal/data
  storage:
    container_name: storage
    env_file: ../service-frontend/.env
    image: minio/minio:latest
    command: ['server', '--console-address', ':9090', '/home/minio/data']
    ports:
      - 55026:9000 # for CLI
      - 55027:9090 # for GUI console
    networks:
      - external
      - internal
    working_dir: /home/minio
    volumes:
      - type: bind
        source: ../storage/.data
        target: /home/minio/data
  minio-client-setup:
    container_name: minio-client-setup
    env_file: ../service-frontend/.env
    image: minio/mc:latest
    depends_on:
      - storage
    networks:
      - internal
    entrypoint: >
      /bin/sh -c "
        /usr/bin/mc alias set shortbook ${AWS_ENDPOINT} ${AWS_ROOT_USER} ${AWS_ROOT_PASSWORD};
        /usr/bin/mc mb shortbook/${AWS_BUCKET_PROFILE_IMAGE} --region=${AWS_REGION};
        /usr/bin/mc anonymous set public shortbook/${AWS_BUCKET_PROFILE_IMAGE};
        exit 0;
      "
networks:
  external:
    driver: bridge
    internal: false
  internal:
    driver: bridge
    internal: true
volumes:
  service-frontend:
  database:
  cache:
  storage:
