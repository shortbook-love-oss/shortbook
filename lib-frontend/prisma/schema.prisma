generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------
// User
// -----------------------------------------------------------------------

model User {
  id                      String              @id @default(cuid())
  name                    String?
  email                   String?             @unique
  emailVerified           DateTime?           @map("email_verified")
  image                   String?
  slug                    String              @unique @db.VarChar(30) // Length 1 - 30
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)

  accounts                Account[]
  Authenticator           Authenticator[]
  sessions                Session[]
  profiles                user_profiles[]
  followers               user_followers[]
  fans                    user_fans[]
  articles                articles[]

  @@map("users")
}

model Account {
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  id                      String              @id @default(cuid())
  userId                  String              @map("user_id")
  type                    String
  provider                String
  providerAccountId       String              @map("provider_account_id")
  refresh_token           String?             @db.Text
  access_token            String?             @db.Text
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String?             @db.Text
  session_state           String?
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Authenticator {
  credentialID            String              @unique
  userId                  String
  providerAccountId       String
  credentialPublicKey     String
  counter                 Int
  credentialDeviceType    String
  credentialBackedUp      Boolean
  transports              String?
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)

  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

model Session {
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  id                      String              @id @default(cuid())
  sessionToken            String              @unique @map("session_token")
  userId                  String              @map("user_id")
  expires                 DateTime
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)

  @@map("sessions")
}

model VerificationToken {
  identifier              String
  token                   String
  expires                 DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model user_profiles {
  user                    User                @relation(fields: [user_id], references: [id], onDelete: Cascade)

  id                      String              @id @default(cuid())
  user_id                 String
  lang_tag                String              @db.VarChar(5)
  pen_name                String              @db.VarChar(210) // Length 1 - 50
  self_info               String?             @db.MediumText
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}

model user_followers {
  target_user             User                @relation(fields: [target_user_id], references: [id])

  id                      String              @id @default(cuid())
  target_user_id          String
  follow_user_id          String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}

model user_fans {
  target_user             User                @relation(fields: [target_user_id], references: [id])

  id                      String              @id @default(cuid())
  target_user_id          String
  support_user_id         String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}

// -----------------------------------------------------------------------
// Articles
// -----------------------------------------------------------------------

model articles {
  user                    User                @relation(fields: [user_id], references: [id])

  id                      String              @id @default(cuid())
  user_id                 String
  status                  Int                 @db.SmallInt // 0: Draft 1: Public 2: Fan club only
  price                   Float               @db.Double
  favorite_count          Int                 // For faster index/get
  published_at            DateTime            @default(now())
  edited_at               DateTime            @default(now())
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)

  languages               article_languages[]
  tags                    article_tags[]
  buys                    article_buys[]
  favorites               article_favorites[]
}

model article_languages {
  article                 articles            @relation(fields: [article_id], references: [id])

  id                      String              @id @default(cuid())
  article_id              String
  lang_tag                String              @db.VarChar(5)
  thumbnail_url           String              @db.VarChar(628)
  title                   String              @db.VarChar(628) // Max length is 255
  introduction            String              @db.LongText
  content                 String              @db.LongText
  sales_message           String              @db.VarChar(4000) // Max length is 1000
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}

model article_tags {
  article                 articles            @relation(fields: [article_id], references: [id])

  id                      String              @id @default(cuid())
  article_id              String
  name                    String              @db.VarChar(128) // Max length is 32
  sort                    Int                 @db.SmallInt
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}

model article_buys {
  article                 articles            @relation(fields: [article_id], references: [id])

  id                      String              @id @default(cuid())
  article_id              String
  user_id                 String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}

model article_favorites {
  article                 articles            @relation(fields: [article_id], references: [id])

  id                      String              @id @default(cuid())
  article_id              String
  user_id                 String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              Boolean             @default(false)
}
