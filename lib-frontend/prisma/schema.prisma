generator client {
  provider                = "prisma-client-js"
  previewFeatures         = ["omitApi"]
}

datasource db {
  provider                = "mysql"
  url                     = env("DATABASE_URL")
}

// -----------------------------------------------------------------------
// User
// -----------------------------------------------------------------------

model User {
  id                      String              @id @default(cuid())
  name                    String?
  email                   String?             @unique @db.VarChar(254)
  emailVerified           DateTime?           @map("email_verified")
  image                   String?             @db.VarChar(510)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  accounts                Account[]
  authenticator           Authenticator[]
  sessions                Session[]
  profiles                user_profiles?
  fans                    user_fans[]
  books                   books[]

  @@map("users")
}

model Account {
  user                    User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  userId                  String              @map("user_id")
  type                    String
  provider                String
  providerAccountId       String              @map("provider_account_id")
  refresh_token           String?             @db.Text
  access_token            String?             @db.Text
  expires_at              Int?
  token_type              String?
  scope                   String?
  id_token                String?             @db.Text
  session_state           String?
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Authenticator {
  user                    User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  credentialID            String              @unique @map("credential_id")
  userId                  String              @map("user_id")
  providerAccountId       String              @map("provider_account_id")
  credentialPublicKey     String              @map("credential_public_key")
  counter                 Int
  credentialDeviceType    String              @map("credential_device_type")
  credentialBackedUp      Boolean             @map("credential_backed_up")
  transports              String?
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@id([userId, credentialID])
  @@map("authenticator")
}

model Session {
  user                    User                @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  sessionToken            String              @unique @map("session_token")
  userId                  String              @map("user_id")
  expires                 DateTime
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@map("sessions")
}

model VerificationToken {
  identifier              String
  token                   String
  expires                 DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model user_profiles {
  user                    User                @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  user_id                 String              @unique
  key_name                String              @unique @db.VarChar(30) // Length 1 - 30
  native_language         String              @db.VarChar(5)
  location                String              @db.VarChar(1022)
  birthday                DateTime?           @db.Date()
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  languages               user_profile_languages[]
}

model user_profile_languages {
  user_profile            user_profiles       @relation(fields: [profile_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  profile_id              String
  language_code           String              @db.VarChar(5)
  pen_name                String              @db.VarChar(210) // Length 1 - 50
  headline                String              @db.VarChar(210) // Length 1 - 50
  self_introduction       String              @db.MediumText
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@unique([profile_id, language_code])
}

model user_fans {
  target_user             User                @relation(fields: [target_user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  target_user_id          String
  support_user_id         String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

// -----------------------------------------------------------------------
// Book
// -----------------------------------------------------------------------

model books {
  user                    User                @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  user_id                 String
  status                  Int                 @db.SmallInt // 0: Draft 1: Public 2: Fan club only
  price                   Float               @db.Double
  published_at            DateTime            @default(now())
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  cover                   book_covers?
  languages               book_languages[]
  tags                    book_tags[]
}

model book_covers {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  book_id                 String              @unique
  base_color_start        String              @db.VarChar(15) // Hex code with "#"
  base_color_end          String              @db.VarChar(15)
  base_color_direction    Int                 @db.SmallInt // 0: bottom→top 90: left→right
  title_font_size         Int                 @db.SmallInt // Font size unit is "px"
  title_align             Int                 @db.SmallInt // 0: left 1: center 2:right
  title_color             String              @db.VarChar(15)
  subtitle_font_size      Int                 @db.SmallInt
  subtitle_align          Int                 @db.SmallInt
  subtitle_color          String              @db.VarChar(15)
  writer_align            Int                 @db.SmallInt
  writer_color            String              @db.VarChar(15)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model book_languages {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  book_id                 String
  language_code           String              @db.VarChar(5)
  thumbnail_url           String              @db.VarChar(255)
  title                   String              @db.VarChar(1400) // Max length is 200
  subtitle                String              @db.VarChar(1400) // Max length is 200
  prologue                String              @db.LongText
  content                 String              @db.LongText
  sales_message           String              @db.Text // Max length is 2000
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model book_tags {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  book_id                 String
  name                    String              @db.VarChar(350) // Max length is 50
  sort                    Int                 @db.SmallInt
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@index([name])
}

// -----------------------------------------------------------------------
// Contact
// -----------------------------------------------------------------------

model tickets {
  id                      String              @id @default(cuid())
  category_key_name       String              @db.VarChar(31)
  email                   String              @db.VarChar(510)
  description             String              @db.LongText
  language_code           String              @db.VarChar(5)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  files                   ticket_files[]
}

model ticket_files {
  ticket                  tickets             @relation(fields: [ticket_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id                      String              @id @default(cuid())
  ticket_id               String
  file_url                String              @db.VarChar(510)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

// -----------------------------------------------------------------------
// Limit rate control
// -----------------------------------------------------------------------

model log_actions {
  id                      String              @id @default(cuid())
  action_name             String              @db.VarChar(31)
  ip_address_hash         String              @db.VarChar(127)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}
