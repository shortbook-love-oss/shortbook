generator client {
  provider                = "prisma-client-js"
  previewFeatures         = ["omitApi"]
}

datasource db {
  provider                = "mysql"
  url                     = env("DATABASE_URL")
}

// -----------------------------------------------------------------------
// User
// -----------------------------------------------------------------------

model users {
  id                      String              @id @db.VarChar(30) @default(cuid())
  key_handle              String              @unique @db.VarChar(30) // Length 1 - 30
  pen_name                String              @db.VarChar(210) // Length 1 - 50
  email                   String              @db.VarChar(510) // Encrypted
  email_hash              String              @unique @db.VarChar(127)
  native_language         String              @db.VarChar(5)
  image_src               String              @db.VarChar(510)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  sessions                sessions[]
  languages               user_languages[]
  points                  user_points[]
  fans                    user_fans[]
  payment_checkouts       user_payment_checkouts[]
  payment_setting         user_payment_settings?
  payment_contracts       user_payment_contracts[]
  images                  user_images[]
  books                   books[]

  @@index([pen_name])
}

model sessions {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  session_token           String              @unique
  expires                 DateTime
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model user_languages {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  target_language         String              @db.VarChar(5)
  headline                String              @db.VarChar(210) // Length 1 - 50
  self_introduction       String              @db.MediumText
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@unique([user_id, target_language])
}

model user_points {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  payment_checkout_id     String              // For charge
  amount                  Int
  book_id                 String              // For buy book
  is_refund               Int                 @db.SmallInt // Use when refunding bought book
  is_sell                 Int                 @db.SmallInt // Use when writer sold book
  is_income               Int                 @db.SmallInt // Use when user's point â†’ money received
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model user_fans {
  target_user             users               @relation(fields: [target_user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  target_user_id          String
  support_user_id         String
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@index([support_user_id])
}

model user_payment_checkouts {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  provider_key            String              @db.VarChar(15)
  session_id              String              // Encrypted
  currency                String              @db.VarChar(3)
  amount                  Decimal
  is_refund               Int                 @db.SmallInt
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model user_payment_settings {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String              @unique
  currency                String              @db.VarChar(3)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model user_payment_contracts {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  provider_key            String              @db.VarChar(15)
  provider_customer_id    String              // Encrypted
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@unique([provider_key, provider_customer_id])
}

// -----------------------------------------------------------------------
// User album
// -----------------------------------------------------------------------

model user_images {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  name                    String              @db.VarChar(1400) // Length 0 - 250
  alt                     String              @db.VarChar(1000) // Length 0 - 150
  image_created_at        DateTime?           @db.Date() // Filmed date or drew date, not published date
  language_in_image       String              @db.VarChar(5)
  place                   String              @db.VarChar(255)
  is_sensitive            Int                 @db.SmallInt // 0: No 1: Yes
  is_ai                   Int                 @db.SmallInt // 0: No 1: Yes (edited) 2: Yes (generated)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  property                user_image_properties?
  license                 user_image_licenses?
  tags                    user_image_tags[]
}

model user_image_properties {
  image                   user_images         @relation(fields: [image_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  image_id                String              @unique
  file_path               String              @db.VarChar(31)
  byte_length             Int
  width                   Int
  height                  Int
  mime_type               String              @db.VarChar(31)
  checksum                String              @db.VarChar(44) // SHA-256
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model user_image_licenses {
  image                   user_images         @relation(fields: [image_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  image_id                String              @unique
  creator_type            Int                 @db.SmallInt // 1: Person 2: Organization
  creator_name            String              @db.VarChar(350) // Length 1 - 50
  copyright_owner         String              @db.VarChar(350) // Length 0 - 50
  target_in_image         String              @db.VarChar(700) // Length 0 - 100
  license_url             String              @db.VarChar(255)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model user_image_tags {
  image                   user_images         @relation(fields: [image_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  image_id                String
  name                    String              @db.VarChar(350) // Length 1 - 50
  sort                    Int                 @db.SmallInt
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@index([name])
}

// -----------------------------------------------------------------------
// Book
// -----------------------------------------------------------------------

model books {
  user                    users               @relation(fields: [user_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  user_id                 String
  url_slug                String              @db.VarChar(100) // Length 1 - 100
  status                  Int                 @db.SmallInt // 0: Draft 1: Public 2: Fan club only
  buy_point               Int
  published_at            DateTime            @default(now())
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  cover                   book_covers?
  languages               book_languages[]
  tags                    book_tags[]
  buys                    book_buys[]

  @@unique([user_id, url_slug])
}

model book_covers {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  book_id                 String              @unique
  base_color_start        String              @db.VarChar(15) // Hex code with "#"
  base_color_end          String              @db.VarChar(15)
  base_color_direction    Int                 @db.SmallInt // 0: bottomâ†’top 90: leftâ†’right
  title_font_size         Int                 @db.SmallInt // Font size unit is "px"
  title_align             String              @db.VarChar(7)
  title_color             String              @db.VarChar(15)
  subtitle_font_size      Int                 @db.SmallInt
  subtitle_align          String              @db.VarChar(7)
  subtitle_color          String              @db.VarChar(15)
  writer_align            String              @db.VarChar(7)
  writer_color            String              @db.VarChar(15)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

model book_languages {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  book_id                 String
  target_language         String              @db.VarChar(5)
  thumbnail_url           String              @db.VarChar(255)
  title                   String              @db.VarChar(1400) // Max length is 200
  subtitle                String              @db.VarChar(1400) // Max length is 200
  prologue                String              @db.LongText
  content                 String              @db.LongText
  sales_message           String              @db.Text // Max length is 2000
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@unique([book_id, target_language])
}

model book_tags {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  book_id                 String
  name                    String              @db.VarChar(350) // Max length is 50
  sort                    Int                 @db.SmallInt
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@index([name])
}

model book_buys {
  book                    books               @relation(fields: [book_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  book_id                 String
  user_id                 String
  point_spend             Int                 // It won't change if writer change the price later
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  @@unique([book_id, user_id])
}

// -----------------------------------------------------------------------
// Contact
// -----------------------------------------------------------------------

model tickets {
  id                      String              @id @db.VarChar(30) @default(cuid())
  category_key_name       String              @db.VarChar(31)
  email                   String              @db.VarChar(510) // Encrypted
  description             String              @db.LongText
  from_language           String              @db.VarChar(5)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?

  files                   ticket_files[]
}

model ticket_files {
  ticket                  tickets             @relation(fields: [ticket_id], references: [id], onUpdate: Cascade)

  id                      String              @id @db.VarChar(30) @default(cuid())
  ticket_id               String
  file_url                String              @db.VarChar(510)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

// -----------------------------------------------------------------------
// Verification token
// -----------------------------------------------------------------------

model verification_tokens {
  identifier              String
  token                   String              @db.VarChar(510)
  user_id                 String?
  expires                 DateTime

  @@unique([identifier, token])
}

// -----------------------------------------------------------------------
// Limit rate control
// -----------------------------------------------------------------------

model log_actions {
  id                      String              @id @db.VarChar(30) @default(cuid())
  action_name             String              @db.VarChar(31)
  ip_address_hash         String              @db.VarChar(127)
  created_at              DateTime            @default(now())
  updated_at              DateTime            @updatedAt
  deleted_at              DateTime?
}

// -----------------------------------------------------------------------
// Reference: Currency rate from 1 USD
// -----------------------------------------------------------------------

model currency_rates {
  currency                String              @id @db.VarChar(3)
  rate                    Decimal
}
